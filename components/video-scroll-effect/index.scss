// .content-container {
//   position: absolute;
//   top: 0;
//   left: 0;
//   width: 100%;
//   height: 100%;
// }

// .child-content {
//   display: flex;
//   flex-direction: column;
//   justify-content: center;
//   align-items: center;
//   text-align: center;
//   opacity: 0; // Default hidden
//   transition:
//     opacity 0.5s ease-in-out,
//     transform 0.5s ease-in-out;
// }

// 'use client';
// import React, { useEffect, useState, useRef } from 'react';
// import './index.scss';

// const VideoScrollEffect = ({
//   videoSrc,
//   className = '',
//   videoClassName = '',
//   children,
//   thresholdView = 0.5,
// }) => {
//   const parentRef = useRef(null);
//   const videoRef = useRef(null);
//   const contentRef = useRef(null);
//   const [isLoading, setIsLoading] = useState(true);

//   useEffect(() => {
//     const video = videoRef.current;
//     if (!video) return;

//     const handleObserver = (entries) => {
//       const entry = entries[0];

//       if (video) {
//         if (entry.isIntersecting) {
//           video.play().catch((err) => console.warn('Autoplay prevented:', err));
//         } else {
//           video.pause();
//         }
//       }
//     };

//     const observer = new IntersectionObserver(handleObserver, {
//       threshold: thresholdView,
//     });

//     observer.observe(video);

//     return () => {
//       observer.disconnect();
//     };
//   }, [thresholdView]);

//   useEffect(() => {
//     const parent = parentRef.current;
//     const content = contentRef.current;
//     if (!parent || !content) return;

//     const totalChildren = React.Children.count(children);

//     const handleScroll = () => {
//       const parentRect = parent.getBoundingClientRect();
//       const scrollProgress = Math.max(
//         0,
//         Math.min(1, -parentRect.top / (parentRect.height - window.innerHeight)),
//       );

//       // Height range for each child
//       const childHeight = 1 / totalChildren;

//       for (let i = 0; i < content.children.length; i++) {
//         const child = content.children[i];
//         const childStart = i * childHeight;
//         const childEnd = (i + 1) * childHeight;

//         let visibilityProgress =
//           (scrollProgress - childStart) / (childEnd - childStart);

//         // Ensure each child appears only when the previous one disappears
//         if (visibilityProgress < 0) visibilityProgress = 0;
//         if (visibilityProgress > 1) visibilityProgress = 1;

//         const opacity =
//           visibilityProgress < 0.5
//             ? 1 - visibilityProgress * 2
//             : (visibilityProgress - 0.5) * 2;
//         const translateY = (1 - visibilityProgress) * 50; // Moves up smoothly

//         child.style.opacity = opacity;
//         child.style.transform = `translateY(${translateY}px)`;
//       }
//     };

//     window.addEventListener('scroll', handleScroll, { passive: true });
//     return () => window.removeEventListener('scroll', handleScroll);
//   }, [children]);

//   return (
//     <div ref={parentRef} className={`relative ${className}`}>
//       {/* Video Container */}
//       <div className="sticky top-0 h-screen overflow-hidden">
//         {isLoading && (
//           <div className="shimmer-effect absolute inset-0 transition-opacity duration-500"></div>
//         )}
//         <video
//           ref={videoRef}
//           className={`video-background absolute inset-0 h-full w-full object-cover transition-opacity duration-500 ${videoClassName} ${
//             isLoading ? 'opacity-0' : 'opacity-100'
//           }`}
//           autoPlay
//           loop
//           muted
//           playsInline
//           onLoadedData={() => setIsLoading(false)}
//         >
//           <source src={videoSrc} type="video/mp4" />
//           Your browser does not support the video tag.
//         </video>
//       </div>

//       {/* Content Container */}
//       <div ref={contentRef} className="content-container absolute inset-0 z-1">
//         {React.Children.map(children, (child, index) => (
//           <div
//             key={index}
//             className="child-content flex h-screen items-center justify-center text-white"
//           >
//             {child}
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// };

// export default VideoScrollEffect;
